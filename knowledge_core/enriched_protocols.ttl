@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix proto: <https://w3id.org/jules/protocol/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

<http://dbpedia.org/resource/Git> a <http://dbpedia.org/ontology/Software>,
        <http://dbpedia.org/ontology/Work>,
        <http://schema.org/CreativeWork>,
        <http://umbel.org/umbel/rc/SoftwareObject>,
        owl:Thing,
        <http://www.wikidata.org/entity/Q386724>,
        <http://www.wikidata.org/entity/Q7397> ;
    rdfs:comment "Git (/ɡɪt/) is a distributed version control system: tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems). Git was originally authored by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Since 2005, Junio Hamano has been the core maintainer. As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server. Git is free and open-source software distributed under the GPL-2.0-only license."@en .

<http://dbpedia.org/resource/JSON> a <http://dbpedia.org/class/yago/Abstraction100002137>,
        <http://dbpedia.org/class/yago/Act100030358>,
        <http://dbpedia.org/class/yago/Activity100407535>,
        <http://dbpedia.org/class/yago/WikicatComputerFileFormats>,
        <http://dbpedia.org/class/yago/WikicatMarkupLanguages>,
        <http://dbpedia.org/class/yago/WikicatOpenFormats>,
        <http://dbpedia.org/class/yago/WikicatWebBrowsers>,
        <http://dbpedia.org/class/yago/WikicatWebServices>,
        <http://dbpedia.org/ontology/Software>,
        owl:Thing ;
    rdfs:comment "JSON (JavaScript Object Notation, pronounced /ˈdʒeɪsən/; also /ˈdʒeɪˌsɒn/) is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of attribute–value pairs and arrays (or other serializable values). It is a common data format with diverse uses in electronic data interchange, including that of web applications with servers. JSON is a language-independent data format. It was derived from JavaScript, but many modern programming languages include code to generate and parse JSON-format data. JSON filenames use the extension .json. Any valid JSON file is a valid JavaScript (.js) file, even though it makes no changes to a web page on its own. Douglas Crockford originally specified the JSON format in the early 2000s. He and Chip Morningstar sent the first JSON message in April 2001."@en .

<http://dbpedia.org/resource/Python_(programming_language)> a <http://dbpedia.org/class/yago/Ability105616246>,
        <http://dbpedia.org/class/yago/Abstraction100002137>,
        <http://dbpedia.org/class/yago/ArtificialLanguage106894544>,
        <http://dbpedia.org/class/yago/Cognition100023271>,
        <http://dbpedia.org/class/yago/WikicatScriptingLanguages>,
        <http://dbpedia.org/ontology/Language>,
        <http://schema.org/Language>,
        owl:Thing,
        <http://www.wikidata.org/entity/Q315>,
        <http://www.wikidata.org/entity/Q9143> ;
    rdfs:comment "Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library. Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 3.0, released in 2008, was a major revision that is not completely backward-compatible with earlier versions. Python 2 was discontinued with version 2.7.18 in 2020. Python consistently ranks as one of the most popular programming languages."@en .

[] proto:associated_artifacts ( <file:///app/protocols/knowledge_core/lessons.jsonl> ) ;
    proto:associated_tools ( <file:///app/protocols/tooling/knowledge_compiler.py> <file:///app/protocols/tooling/protocol_updater.py> <file:///app/protocols/tooling/self_correction_orchestrator.py> <file:///app/protocols/initiate_memory_recording> ) ;
    proto:description "Defines the automated, closed-loop workflow for protocol self-correction." ;
    proto:protocol_id "self-correction-protocol-001" ;
    proto:rules ( [ proto:description "Lessons learned from post-mortem analysis must be generated as structured, machine-readable JSON objects in `knowledge_core/lessons.jsonl`." ;
                proto:enforcement "The `tooling/knowledge_compiler.py` script is responsible for generating lessons in the correct format." ;
                proto:rule_id "structured-lessons" ] [ proto:description "All modifications to protocol source files must be performed programmatically via the `tooling/protocol_updater.py` tool to ensure consistency and prevent manual errors." ;
                proto:enforcement "Agent's core logic should be designed to use this tool for all protocol modifications." ;
                proto:rule_id "programmatic-updates" ] [ proto:description "The self-correction cycle must be managed by the `tooling/self_correction_orchestrator.py` script, which processes pending lessons and triggers the necessary updates." ;
                proto:enforcement "This script is the designated engine for the PDSC workflow." ;
                proto:rule_id "automated-orchestration" ] ) .

[] proto:associated_tools ( <file:///app/protocols/reset_all> ) ;
    proto:description "A specific, high-priority protocol that forbids the Code Review Critic agent from using the 'reset_all' tool." ;
    proto:protocol_id "critic-reset-prohibition-001" ;
    proto:rules ( [ proto:description "The agent role-playing as the 'Code Review Critic' is explicitly forbidden from invoking the 'reset_all' tool under any circumstances. This is a critical safeguard to prevent the loss of work during the review process." ;
                proto:enforcement "This rule is enforced by its inclusion in the compiled AGENTS.md, which serves as the context for the Code Review Critic. The critic must be programmed to parse and adhere to this prohibition." ;
                proto:rule_id "critic-no-reset" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/fdc_cli.py> ) ;
    proto:description "The mandatory first action for any new task, ensuring a formal start to the Finite Development Cycle (FDC)." ;
    proto:protocol_id "core-directive-001" ;
    proto:rules ( [ proto:description "Upon receiving a new task, the agent's first action MUST be to programmatically execute the FDC 'start' command to formally initiate the task and run the AORP orientation cascade." ;
                proto:enforcement "This is a hard-coded behavior in the agent's core operational loop and is verified by the FDC toolchain." ;
                proto:rule_id "mandatory-fdc-start" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/fdc_cli.py> <file:///app/protocols/tooling/fdc_fsm.json> ) ;
    proto:description "Ensures all development processes are formally decidable and computationally tractable." ;
    proto:protocol_id "decidability-constraints-001" ;
    proto:rules ( [ proto:description "The agent's planning and execution language is, by design, not Turing-complete. This is a fundamental constraint to guarantee that all processes will terminate." ;
                proto:enforcement "Enforced by the design of the plan runner and validated by the `lint` command in the FDC toolchain." ;
                proto:rule_id "non-turing-completeness" ] [ proto:description "The agent MUST NOT generate plans that involve recursion or self-invocation. A plan cannot trigger another FDC or a sub-plan, with the sole exception of the 'Deep Research Cycle'." ;
                proto:enforcement "The `lint` command in `tooling/fdc_cli.py` scans plans for disallowed recursive calls." ;
                proto:rule_id "bounded-recursion" ] [ proto:description "All plans must be valid strings in the language defined by the tooling/fdc_fsm.json Finite State Machine." ;
                proto:enforcement "The `lint` command in `tooling/fdc_cli.py` validates the plan against the FSM definition." ;
                proto:rule_id "fsm-adherence" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling.research_planner.plan_deep_research> <file:///app/protocols/tooling.research.execute_research_protocol> ) ;
    proto:description "A protocol for conducting systematic research using the integrated research toolchain." ;
    proto:protocol_id "research-protocol-001" ;
    proto:rules ( [ proto:description "For all complex research tasks, the `plan_deep_research` tool MUST be used to generate a plan, and the `execute_research_protocol` tool MUST be used for data gathering. This ensures a systematic and auditable research process." ;
                proto:enforcement "Adherence is monitored by the Code Review Critic and through post-mortem analysis of the activity log." ;
                proto:rule_id "mandate-research-tools" ] ) .

[] proto:description "A meta-protocol that governs the behavior and evaluation criteria of the Code Review Critic agent." ;
    proto:protocol_id "critic-meta-protocol-001" ;
    proto:rules ( [ proto:description "The `protocols/` directory and all its contents (`.md`, `.json` files) MUST be treated as functional source code. Changes to these files directly alter the agent's operational capabilities and governing rules." ;
                proto:enforcement "The Code Review Critic must analyze changes in this directory with the same rigor as changes to `.py` files." ;
                proto:rule_id "protocol-as-source-code" ] [ proto:description "The agent's execution environment provides a set of built-in tools (e.g., `read_file`, `delete_file`, `pre_commit_instructions`). The implementation of these tools does not reside within the repository. A protocol change that adds a built-in tool to the `associated_tools` list is a valid and complete functional change." ;
                proto:enforcement "The Code Review Critic must not flag a change as 'incomplete' or 'non-functional' solely because the implementation of a built-in tool is not present in the repository." ;
                proto:rule_id "built-in-tools-are-valid" ] [ proto:description "A change is considered 'functional' if it correctly modifies the agent's operational rules or capabilities, as defined by the combination of Python source code and the protocol source files in `protocols/`." ;
                proto:enforcement "The Code Review Critic's evaluation of 'functionality' must encompass both traditional code and protocol definitions." ;
                proto:rule_id "functional-change-definition" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/plan_manager.py> <file:///app/protocols/tooling/master_control.py> <file:///app/protocols/tooling/fdc_cli.py> ) ;
    proto:description "Defines a central registry for discovering and executing hierarchical plans by a logical name." ;
    proto:protocol_id "plan-registry-001" ;
    proto:rules ( [ proto:description "A central plan registry MUST exist at 'knowledge_core/plan_registry.json'. It maps logical plan names to their file paths." ;
                proto:enforcement "The file's existence and format can be checked by the validation toolchain." ;
                proto:rule_id "registry-definition" ] [ proto:description "The 'call_plan <argument>' directive MUST first attempt to resolve '<argument>' as a logical name in the plan registry. If resolution fails, it MUST fall back to treating '<argument>' as a direct file path for backward compatibility." ;
                proto:enforcement "This logic must be implemented in both the plan validator (`fdc_cli.py`) and the execution engine (`master_control.py`)." ;
                proto:rule_id "registry-first-resolution" ] [ proto:description "A dedicated tool (`tooling/plan_manager.py`) MUST be provided for managing the plan registry, with functions to register, deregister, and list plans." ;
                proto:enforcement "The tool's existence and functionality can be verified via integration tests." ;
                proto:rule_id "registry-management-tool" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/fdc_cli.py> <file:///app/protocols/google_search> <file:///app/protocols/view_text_website> ) ;
    proto:description "A set of non-negotiable, high-priority mandates that govern the agent's behavior across all tasks." ;
    proto:protocol_id "standing-orders-001" ;
    proto:rules ( [ proto:description "All Finite Development Cycles (FDCs) MUST be initiated using the FDC toolchain's 'start' command. This is non-negotiable." ;
                proto:enforcement "Enforced by the agent's core operational loop and the `start` command in `tooling/fdc_cli.py`." ;
                proto:rule_id "aorp-mandate" ] [ proto:description "For any task involving external technologies, Just-In-Time External RAG is REQUIRED to verify current best practices. Do not trust internal knowledge." ;
                proto:enforcement "This is a core principle of the L3 orientation phase, utilizing tools like `google_search`." ;
                proto:rule_id "rag-mandate" ] [ proto:description "Use the `fdc_cli.py` tool for all core FDC state transitions: task initiation ('start'), plan linting ('lint'), and task closure ('close')." ;
                proto:enforcement "The agent's internal logic is designed to prefer these specific tool commands for FDC state transitions." ;
                proto:rule_id "fdc-toolchain-mandate" ] ) .

[] proto:description "A protocol that defines non-compliance with AGENTS.md and specifies corrective actions." ;
    proto:protocol_id "non-compliance-protocol-001" ;
    proto:rules ( [ proto:description "Defines non-compliance as a violation of any rule, convention, or procedure in AGENTS.md or its source protocols." ;
                proto:enforcement "This is a definitional rule. Enforcement is achieved through the agent's adherence to the specific non-compliance rules that follow." ;
                proto:rule_id "non-compliance-definition" ] [ proto:associated_tools ( <file:///app/protocols/restore_file> <file:///app/protocols/run_in_bash_session> ) ;
                proto:description "Prohibits the direct editing of build artifacts like AGENTS.md or README.md. Changes must be made to source files, followed by a rebuild." ;
                proto:enforcement "Agent must revert direct edits and modify source files, then run the appropriate build command." ;
                proto:rule_id "non-compliance-direct-editing" ] [ proto:associated_tools ( <file:///app/protocols/run_in_bash_session> ) ;
                proto:description "Requires adherence to all documented testing procedures before submitting changes." ;
                proto:enforcement "Agent must halt execution and run the required tests, debugging any failures before proceeding." ;
                proto:rule_id "non-compliance-test-procedure" ] [ proto:description "Forbids changes that contradict documented architectural patterns or coding conventions." ;
                proto:enforcement "Agent must revert non-compliant changes and re-implement them according to standards." ;
                proto:rule_id "non-compliance-architectural-deviation" ] [ proto:associated_tools ( <file:///app/protocols/run_in_bash_session> ) ;
                proto:description "Requires the agent to maintain an up-to-date understanding of protocols by recompiling AGENTS.md when necessary." ;
                proto:enforcement "Agent should run 'make AGENTS.md' to refresh its protocol knowledge and re-evaluate its plan." ;
                proto:rule_id "non-compliance-self-awareness-failure" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/master_control.py> <file:///app/protocols/tooling/fdc_cli.py> ) ;
    proto:description "Defines the Context-Free Development Cycle (CFDC), a hierarchical planning and execution model." ;
    proto:protocol_id "cfdc-protocol-001" ;
    proto:rules ( [ proto:description "Plans may execute other plans as sub-routines using the 'call_plan <path_to_plan>' directive. This enables a modular, hierarchical workflow." ;
                proto:enforcement "The plan validator must be able to parse this directive and recursively validate sub-plans. The execution engine must implement a plan execution stack to manage the context of nested calls." ;
                proto:rule_id "hierarchical-planning-via-call-plan" ] [ proto:description "To ensure decidability, the plan execution stack must not exceed a system-wide constant, MAX_RECURSION_DEPTH. This prevents infinite recursion and guarantees all processes will terminate." ;
                proto:enforcement "The execution engine must check the stack depth before every 'call_plan' execution and terminate with a fatal error if the limit would be exceeded." ;
                proto:rule_id "max-recursion-depth" ] ) .

[] proto:description "Defines the identity and versioning of the Advanced Orientation and Research Protocol (AORP)." ;
    proto:protocol_id "aorp-header" ;
    proto:rules ( [ proto:description "The governing protocol set is identified as the Advanced Orientation and Research Protocol (AORP)." ;
                proto:enforcement "Protocol is identified by its name in documentation and compiled artifacts." ;
                proto:rule_id "aorp-identity" ] [ proto:description "The official protocol version is tracked in the VERSION file in the repository root, following Semantic Versioning (SemVer)." ;
                proto:enforcement "Build or validation scripts should verify the presence and format of the VERSION file." ;
                proto:rule_id "aorp-versioning" ] ) .

[] proto:associated_tools ( <file:///app/protocols/create_file_with_block> <file:///app/protocols/overwrite_file_with_block> <file:///app/protocols/replace_with_git_merge_diff> <file:///app/protocols/delete_file> <file:///app/protocols/read_file> <file:///app/protocols/list_files> <file:///app/protocols/grep> ) ;
    proto:description "A set of best practices derived from observing successful, data-driven workflow patterns." ;
    proto:protocol_id "best-practices-001" ;
    proto:rules ( [ proto:description "After every file creation or modification action (`create_file_with_block`, `overwrite_file_with_block`, `replace_with_git_merge_diff`), the agent MUST use a subsequent read-only tool (`read_file`, `list_files`, `grep`) to verify that the action was executed successfully and had the intended effect. A plan step should only be marked as complete after this verification." ;
                proto:enforcement "This is a core operational discipline. Future tooling, such as a trace validator, could enforce this by analyzing the execution log against this protocol." ;
                proto:rule_id "verify-after-write" ] ) .

[] proto:associated_tools ( <file:///app/protocols/pre_commit_instructions> ) ;
    proto:description "Defines the mandatory pre-commit checks to ensure code quality, correctness, and readiness for submission." ;
    proto:protocol_id "pre-commit-protocol-001" ;
    proto:rules ( [ proto:description "Before submitting changes, the agent MUST execute the `pre_commit_instructions` tool to receive the required sequence of validation steps (e.g., running tests, requesting code review)." ;
                proto:enforcement "The agent's core logic should invoke this tool as the entry point to the pre-submission phase." ;
                proto:rule_id "pre-commit-instructions-mandate" ] ) .

[] proto:associated_tools ( <file:///app/protocols/run_in_bash_session> ) ;
    proto:description "A meta-protocol governing the agent's awareness and maintenance of its own core protocol files." ;
    proto:protocol_id "meta-protocol-001" ;
    proto:rules ( [ proto:description "The AGENTS.md file is a build artifact generated from source files in the 'protocols/' directory. Before relying on AGENTS.md, the agent should ensure it is up-to-date by running 'make AGENTS.md'. This ensures the agent is operating with the latest set of protocols." ;
                proto:enforcement "The agent should incorporate this check into its standard operating procedure, particularly at the beginning of a task or when unexpected behavior occurs." ;
                proto:rule_id "agents-md-self-awareness" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/environmental_probe.py> <file:///app/protocols/google_search> <file:///app/protocols/view_text_website> ) ;
    proto:description "Defines the mandatory, four-tiered orientation cascade that must be executed at the start of any task to establish a coherent model of the agent's identity, environment, and the world state." ;
    proto:protocol_id "orientation-cascade-001" ;
    proto:rules ( [ proto:description "Level 1 (Self-Awareness): The agent must first establish its own identity and inherent limitations by reading the `knowledge_core/agent_meta.json` artifact." ;
                proto:enforcement "The `start` command of the FDC toolchain executes this step and fails if the artifact is missing or invalid." ;
                proto:rule_id "l1-self-awareness" ] [ proto:description "Level 2 (Repository Sync): The agent must understand the current state of the local repository by loading primary artifacts from the `knowledge_core/` directory." ;
                proto:enforcement "The `start` command of the FDC toolchain executes this step." ;
                proto:rule_id "l2-repository-sync" ] [ proto:description "Level 3 (Environmental Probing & Targeted RAG): The agent must discover the rules and constraints of its operational environment by executing a probe script and using targeted RAG to resolve 'known unknowns'." ;
                proto:enforcement "The `start` command of the FDC toolchain executes this step, utilizing tools like `google_search` and `view_text_website`." ;
                proto:rule_id "l3-environmental-probing" ] [ proto:description "Level 4 (Deep Research Cycle): To investigate 'unknown unknowns', the agent must initiate a formal, self-contained Finite Development Cycle (FDC) of the 'Analysis Modality'." ;
                proto:enforcement "This is a special case of recursion, explicitly allowed and managed by the FDC toolchain." ;
                proto:rule_id "l4-deep-research-cycle" ] ) .

[] proto:associated_tools ( <file:///app/protocols/reset_all> ) ;
    proto:description "Requires explicit user authorization via a token file for the use of the destructive `reset_all` tool." ;
    proto:protocol_id "reset-all-authorization-001" ;
    proto:rules ( [ proto:description "The `reset_all` tool must not execute unless a file named `authorization.token` exists in the repository root." ;
                proto:enforcement "The `reset_all` tool's implementation must be modified to check for the existence of this file, proceed with its operation, and then delete the token file upon completion. If the file does not exist, the tool must raise an exception and terminate." ;
                proto:rule_id "require-authorization-token" ] ) .

[] proto:associated_tools ( <file:///app/protocols/read_file> ) ;
    proto:description "A foundational protocol that dictates the agent's initial actions upon starting any task." ;
    proto:protocol_id "agent-bootstrap-001" ;
    proto:rules ( [ proto:description "Upon initialization for any task, the agent's first and highest-priority action must be to locate, read, and parse the AGENTS.md file in the repository root. This ensures the agent is properly contextualized before any planning or execution begins." ;
                proto:enforcement "This rule is enforced by the agent's core startup logic. The agent must verify the load of AGENTS.md before proceeding to the planning phase." ;
                proto:rule_id "bootstrap-load-agents-md" ] ) .

[] proto:associated_tools ( <file:///app/protocols/tooling/fdc_cli.py> <file:///app/protocols/tooling/fdc_fsm.json> <file:///app/protocols/knowledge_core/symbols.json> <file:///app/protocols/knowledge_core/dependency_graph.json> <file:///app/protocols/LOGGING_SCHEMA.md> ) ;
    proto:description "Defines the Finite Development Cycle (FDC), a formally defined process for executing a single, coherent task." ;
    proto:protocol_id "fdc-protocol-001" ;
    proto:rules ( [ proto:description "The AORP cascade is the mandatory entry point to every FDC." ;
                proto:enforcement "Enforced by the `start` command in `tooling/fdc_cli.py`." ;
                proto:rule_id "fdc-entry-point" ] [ proto:description "The FDC is a Finite State Machine (FSM) formally defined in `tooling/fdc_fsm.json`. Plans must be valid strings in the language defined by this FSM." ;
                proto:enforcement "Validated by the `lint` command in `tooling/fdc_cli.py`." ;
                proto:rule_id "fdc-state-transitions" ] [ proto:description "Phase 1 (Deconstruction & Contextualization): The agent must ingest the task, query historical logs, identify entities using the symbol map, and analyze impact using the dependency graph." ;
                proto:enforcement "Procedural step guided by the agent's core logic, using artifacts in `logs/` and `knowledge_core/`." ;
                proto:rule_id "phase1-deconstruction" ] [ proto:description "Phase 2 (Planning & Self-Correction): The agent must generate a granular plan, lint it using the FDC toolchain, cite evidence for its steps, and perform a critical review." ;
                proto:enforcement "The `lint` command in `tooling/fdc_cli.py` is a mandatory pre-flight check." ;
                proto:rule_id "phase2-planning" ] [ proto:description "Phase 3 (Execution & Structured Logging): The agent must execute the validated plan and log every action according to the `LOGGING_SCHEMA.md`." ;
                proto:enforcement "Logging is performed by the agent's action execution wrapper." ;
                proto:rule_id "phase3-execution" ] [ proto:description "Phase 4 (Pre-Submission Post-Mortem): The agent must formally close the task using the `close` command and complete the generated post-mortem report." ;
                proto:enforcement "The `close` command in `tooling/fdc_cli.py` initiates this phase." ;
                proto:rule_id "phase4-post-mortem" ] ) .
