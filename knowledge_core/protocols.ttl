@prefix dct: <http://purl.org/dc/terms/> .
@prefix proto: <https://www.jules-agent.com/ontology/protocol#> .
@prefix schema1: <http://schema.org/> .

[] dct:identifier <file:///app/protocols/core-directive-001> ;
    schema1:description "The mandatory first action for any new task, ensuring a formal start to the Finite Development Cycle (FDC)." ;
    proto:associatedTool <file:///app/protocols/tooling/fdc_cli.py> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/mandatory-fdc-start> ;
            schema1:description "Upon receiving a new task, the agent's first action MUST be to programmatically execute the FDC 'start' command to formally initiate the task and run the AORP orientation cascade." ;
            proto:enforcement "This is a hard-coded behavior in the agent's core operational loop and is verified by the FDC toolchain." ] .

[] dct:identifier <file:///app/protocols/standing-orders-001> ;
    schema1:description "A set of non-negotiable, high-priority mandates that govern the agent's behavior across all tasks." ;
    proto:associatedTool <file:///app/protocols/google_search>,
        <file:///app/protocols/tooling/fdc_cli.py>,
        <file:///app/protocols/view_text_website> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/aorp-mandate> ;
            schema1:description "All Finite Development Cycles (FDCs) MUST be initiated using the FDC toolchain's 'start' command. This is non-negotiable." ;
            proto:enforcement "Enforced by the agent's core operational loop and the `start` command in `tooling/fdc_cli.py`." ],
        [ dct:identifier <file:///app/protocols/rag-mandate> ;
            schema1:description "For any task involving external technologies, Just-In-Time External RAG is REQUIRED to verify current best practices. Do not trust internal knowledge." ;
            proto:enforcement "This is a core principle of the L3 orientation phase, utilizing tools like `google_search`." ],
        [ dct:identifier <file:///app/protocols/fdc-toolchain-mandate> ;
            schema1:description "Use the `fdc_cli.py` tool for all core FDC state transitions: task initiation ('start'), plan linting ('lint'), and task closure ('close')." ;
            proto:enforcement "The agent's internal logic is designed to prefer these specific tool commands for FDC state transitions." ] .

[] dct:identifier <file:///app/protocols/decidability-constraints-001> ;
    schema1:description "Ensures all development processes are formally decidable and computationally tractable." ;
    proto:associatedTool <file:///app/protocols/tooling/fdc_cli.py>,
        <file:///app/protocols/tooling/fdc_fsm.json> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/fsm-adherence> ;
            schema1:description "All plans must be valid strings in the language defined by the tooling/fdc_fsm.json Finite State Machine." ;
            proto:enforcement "The `lint` command in `tooling/fdc_cli.py` validates the plan against the FSM definition." ],
        [ dct:identifier <file:///app/protocols/bounded-recursion> ;
            schema1:description "The agent MUST NOT generate plans that involve recursion or self-invocation. A plan cannot trigger another FDC or a sub-plan, with the sole exception of the 'Deep Research Cycle'." ;
            proto:enforcement "The `lint` command in `tooling/fdc_cli.py` scans plans for disallowed recursive calls." ],
        [ dct:identifier <file:///app/protocols/non-turing-completeness> ;
            schema1:description "The agent's planning and execution language is, by design, not Turing-complete. This is a fundamental constraint to guarantee that all processes will terminate." ;
            proto:enforcement "Enforced by the design of the plan runner and validated by the `lint` command in the FDC toolchain." ] .

[] dct:identifier <file:///app/protocols/orientation-cascade-001> ;
    schema1:description "Defines the mandatory, four-tiered orientation cascade that must be executed at the start of any task to establish a coherent model of the agent's identity, environment, and the world state." ;
    proto:associatedTool <file:///app/protocols/google_search>,
        <file:///app/protocols/tooling/environmental_probe.py>,
        <file:///app/protocols/view_text_website> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/l4-deep-research-cycle> ;
            schema1:description "Level 4 (Deep Research Cycle): To investigate 'unknown unknowns', the agent must initiate a formal, self-contained Finite Development Cycle (FDC) of the 'Analysis Modality'." ;
            proto:enforcement "This is a special case of recursion, explicitly allowed and managed by the FDC toolchain." ],
        [ dct:identifier <file:///app/protocols/l3-environmental-probing> ;
            schema1:description "Level 3 (Environmental Probing & Targeted RAG): The agent must discover the rules and constraints of its operational environment by executing a probe script and using targeted RAG to resolve 'known unknowns'." ;
            proto:enforcement "The `start` command of the FDC toolchain executes this step, utilizing tools like `google_search` and `view_text_website`." ],
        [ dct:identifier <file:///app/protocols/l1-self-awareness> ;
            schema1:description "Level 1 (Self-Awareness): The agent must first establish its own identity and inherent limitations by reading the `knowledge_core/agent_meta.json` artifact." ;
            proto:enforcement "The `start` command of the FDC toolchain executes this step and fails if the artifact is missing or invalid." ],
        [ dct:identifier <file:///app/protocols/l2-repository-sync> ;
            schema1:description "Level 2 (Repository Sync): The agent must understand the current state of the local repository by loading primary artifacts from the `knowledge_core/` directory." ;
            proto:enforcement "The `start` command of the FDC toolchain executes this step." ] .

[] dct:identifier <file:///app/protocols/meta-protocol-001> ;
    schema1:description "A meta-protocol governing the agent's awareness and maintenance of its own core protocol files." ;
    proto:associatedTool <file:///app/protocols/run_in_bash_session> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/agents-md-self-awareness> ;
            schema1:description "The AGENTS.md file is a build artifact generated from source files in the 'protocols/' directory. Before relying on AGENTS.md, the agent should ensure it is up-to-date by running 'make AGENTS.md'. This ensures the agent is operating with the latest set of protocols." ;
            proto:enforcement "The agent should incorporate this check into its standard operating procedure, particularly at the beginning of a task or when unexpected behavior occurs." ] .

[] dct:identifier <file:///app/protocols/best-practices-001> ;
    schema1:description "A set of best practices derived from observing successful, data-driven workflow patterns." ;
    proto:associatedTool <file:///app/protocols/create_file_with_block>,
        <file:///app/protocols/grep>,
        <file:///app/protocols/list_files>,
        <file:///app/protocols/overwrite_file_with_block>,
        <file:///app/protocols/read_file>,
        <file:///app/protocols/replace_with_git_merge_diff> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/verify-after-write> ;
            schema1:description "After every file creation or modification action (`create_file_with_block`, `overwrite_file_with_block`, `replace_with_git_merge_diff`), the agent MUST use a subsequent read-only tool (`read_file`, `list_files`, `grep`) to verify that the action was executed successfully and had the intended effect. A plan step should only be marked as complete after this verification." ;
            proto:enforcement "This is a core operational discipline. Future tooling, such as a trace validator, could enforce this by analyzing the execution log against this protocol." ] .

[] dct:identifier <file:///app/protocols/fdc-protocol-001> ;
    schema1:description "Defines the Finite Development Cycle (FDC), a formally defined process for executing a single, coherent task." ;
    proto:associatedTool <file:///app/protocols/LOGGING_SCHEMA.md>,
        <file:///app/protocols/knowledge_core/dependency_graph.json>,
        <file:///app/protocols/knowledge_core/symbols.json>,
        <file:///app/protocols/tooling/fdc_cli.py>,
        <file:///app/protocols/tooling/fdc_fsm.json> ;
    proto:hasRule [ dct:identifier <file:///app/protocols/phase2-planning> ;
            schema1:description "Phase 2 (Planning & Self-Correction): The agent must generate a granular plan, lint it using the FDC toolchain, cite evidence for its steps, and perform a critical review." ;
            proto:enforcement "The `lint` command in `tooling/fdc_cli.py` is a mandatory pre-flight check." ],
        [ dct:identifier <file:///app/protocols/fdc-state-transitions> ;
            schema1:description "The FDC is a Finite State Machine (FSM) formally defined in `tooling/fdc_fsm.json`. Plans must be valid strings in the language defined by this FSM." ;
            proto:enforcement "Validated by the `lint` command in `tooling/fdc_cli.py`." ],
        [ dct:identifier <file:///app/protocols/phase4-post-mortem> ;
            schema1:description "Phase 4 (Pre-Submission Post-Mortem): The agent must formally close the task using the `close` command and complete the generated post-mortem report." ;
            proto:enforcement "The `close` command in `tooling/fdc_cli.py` initiates this phase." ],
        [ dct:identifier <file:///app/protocols/fdc-entry-point> ;
            schema1:description "The AORP cascade is the mandatory entry point to every FDC." ;
            proto:enforcement "Enforced by the `start` command in `tooling/fdc_cli.py`." ],
        [ dct:identifier <file:///app/protocols/phase1-deconstruction> ;
            schema1:description "Phase 1 (Deconstruction & Contextualization): The agent must ingest the task, query historical logs, identify entities using the symbol map, and analyze impact using the dependency graph." ;
            proto:enforcement "Procedural step guided by the agent's core logic, using artifacts in `logs/` and `knowledge_core/`." ],
        [ dct:identifier <file:///app/protocols/phase3-execution> ;
            schema1:description "Phase 3 (Execution & Structured Logging): The agent must execute the validated plan and log every action according to the `LOGGING_SCHEMA.md`." ;
            proto:enforcement "Logging is performed by the agent's action execution wrapper." ] .

[] dct:identifier <file:///app/protocols/aorp-header> ;
    schema1:description "Defines the identity and versioning of the Advanced Orientation and Research Protocol (AORP)." ;
    proto:hasRule [ dct:identifier <file:///app/protocols/aorp-identity> ;
            schema1:description "The governing protocol set is identified as the Advanced Orientation and Research Protocol (AORP)." ;
            proto:enforcement "Protocol is identified by its name in documentation and compiled artifacts." ],
        [ dct:identifier <file:///app/protocols/aorp-versioning> ;
            schema1:description "The official protocol version is tracked in the VERSION file in the repository root, following Semantic Versioning (SemVer)." ;
            proto:enforcement "Build or validation scripts should verify the presence and format of the VERSION file." ] .
