import os
import glob
import json
import jsonschema

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
PROTOCOLS_DIR = os.path.join(ROOT_DIR, "protocols")
SCHEMA_FILE = os.path.join(PROTOCOLS_DIR, "protocol.schema.json")
TARGET_FILE = os.path.join(ROOT_DIR, "AGENTS.md")

DISCLAIMER = """\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the `protocol_compiler.py` script.
# All changes to agent protocols must be made in the source files
# located in the `protocols/` directory.
#
# This file contains the compiled protocols in a human-readable Markdown format,
# with machine-readable JSON definitions embedded.
# ---

"""

def load_schema():
    """Loads the protocol JSON schema."""
    try:
        with open(SCHEMA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: Schema file not found at {SCHEMA_FILE}")
        return None
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from schema file at {SCHEMA_FILE}")
        return None

def compile_protocols():
    """
    Reads all .protocol.json and corresponding .protocol.md files from the
    protocols directory, validates them, and compiles them into a single,
    human-readable AGENTS.md file.
    """
    print("--- Starting Protocol Compilation (Markdown + JSON) ---")
    print(f"Source directory: {PROTOCOLS_DIR}")
    print(f"Target file: {TARGET_FILE}")

    schema = load_schema()
    if not schema:
        return

    # Find all source files of different types
    protocol_files = sorted(glob.glob(os.path.join(PROTOCOLS_DIR, "*.protocol.json")))
    md_files = glob.glob(os.path.join(PROTOCOLS_DIR, "*.protocol.md"))
    autodoc_files = glob.glob(os.path.join(PROTOCOLS_DIR, "*.autodoc.md"))

    # Combine all file types into a single list and sort them numerically
    all_files = sorted(protocol_files + autodoc_files)

    if not all_files:
        print("Error: No protocol or autodoc files found.")
        return

    print(f"Found {len(protocol_files)} protocol, {len(md_files)} markdown, and {len(autodoc_files)} autodoc files.")

    # Start building the final content
    final_content = [DISCLAIMER]

    # Process each file
    for file_path in all_files:
        base_name = os.path.basename(file_path)
        print(f"  - Processing {base_name}...")

        if file_path.endswith(".autodoc.md"):
            # This is a placeholder to inject auto-generated documentation
            doc_path = os.path.join(ROOT_DIR, "knowledge_core", "SYSTEM_DOCUMENTATION.md")
            try:
                with open(doc_path, "r") as f:
                    final_content.append(f.read())
                print(f"    - Injected system documentation from {doc_path}")
            except FileNotFoundError:
                print(f"    - Warning: System documentation file not found at {doc_path}")
            final_content.append("\n---\n")
            continue

        # --- Standard .protocol.json processing ---
        prefix = base_name.split("_")[0]
        matching_md = next((md for md in md_files if os.path.basename(md).startswith(prefix + "_")), None)

        if matching_md:
            print(f"    - Found corresponding markdown: {os.path.basename(matching_md)}")
            with open(matching_md, "r") as f:
                final_content.append(f.read())
        else:
            print(f"    - Warning: No corresponding markdown file found for prefix '{prefix}'.")

        # --- Validate and append JSON protocol content ---
        try:
            with open(file_path, "r") as f:
                protocol_data = json.load(f)
            jsonschema.validate(instance=protocol_data, schema=schema)
            print(f"    - JSON validation successful.")

            json_string = json.dumps(protocol_data, indent=2)
            md_json_block = f"```json\n{json_string}\n```\n"
            final_content.append(md_json_block)
        except Exception as e:
            print(f"    - Error: Failed to process JSON for {base_name}: {e}")

        final_content.append("\n---\n")


    # Write the final content to the target file
    with open(TARGET_FILE, "w") as f:
        f.write("\n".join(final_content))

    print("\n--- Compilation Successful ---")
    print(f"Successfully generated new AGENTS.md file.")

def main():
    """Main function to run the compiler."""
    compile_protocols()

if __name__ == "__main__":
    main()