import os
import glob

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
PROTOCOLS_DIR = os.path.join(ROOT_DIR, "protocols")
TARGET_FILE = os.path.join(ROOT_DIR, "AGENTS.md")

DISCLAIMER = """\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the `protocol_compiler.py` script.
# All changes to agent protocols must be made in the markdown files
# located in the `protocols/` directory.
# ---

"""

def compile_protocols():
    """
    Reads all markdown files from the protocols directory, concatenates them
    in alphanumerical order, and writes the result to the target AGENTS.md file.
    """
    print(f"--- Starting Protocol Compilation ---")
    print(f"Source directory: {PROTOCOLS_DIR}")
    print(f"Target file: {TARGET_FILE}")

    # Find all markdown files in the protocols directory
    protocol_files = sorted(glob.glob(os.path.join(PROTOCOLS_DIR, "*.md")))

    if not protocol_files:
        print("Error: No protocol files found in the 'protocols/' directory.")
        return

    print(f"Found {len(protocol_files)} protocol files to compile:")
    for f in protocol_files:
        print(f"  - {os.path.basename(f)}")

    # Read and concatenate the content of each file
    full_protocol_content = ""
    for file_path in protocol_files:
        with open(file_path, "r") as f:
            full_protocol_content += f.read()
            # Ensure there's a newline between concatenated files
            if not full_protocol_content.endswith("\n\n"):
                full_protocol_content += "\n\n"

    # Prepend the disclaimer
    final_content = DISCLAIMER + full_protocol_content

    # Write the final content to the target file
    with open(TARGET_FILE, "w") as f:
        f.write(final_content)

    print(f"\n--- Compilation Successful ---")
    print(f"Successfully generated new AGENTS.md file.")

def main():
    """Main function to run the compiler."""
    compile_protocols()

if __name__ == "__main__":
    main()