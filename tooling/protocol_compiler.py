import os
import glob
import json
import jsonschema

# --- Configuration ---
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
PROTOCOLS_DIR = os.path.join(ROOT_DIR, "protocols")
SCHEMA_FILE = os.path.join(PROTOCOLS_DIR, "protocol.schema.json")
TARGET_FILE = os.path.join(ROOT_DIR, "AGENTS.md")

DISCLAIMER = """\
# ---
# DO NOT EDIT THIS FILE DIRECTLY.
# This file is programmatically generated by the `protocol_compiler.py` script.
# All changes to agent protocols must be made in the JSON files
# located in the `protocols/` directory.
#
# This file contains the compiled protocols in a machine-readable JSON format.
# ---

"""

def load_schema():
    """Loads the protocol JSON schema."""
    try:
        with open(SCHEMA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: Schema file not found at {SCHEMA_FILE}")
        return None
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from schema file at {SCHEMA_FILE}")
        return None

def compile_protocols():
    """
    Reads all .protocol.json files from the protocols directory, validates them
    against the schema, and compiles them into a single AGENTS.md file
    containing a JSON code block.
    """
    print("--- Starting Protocol Compilation (Hybrid MD/JSON) ---")
    print(f"Source directory: {PROTOCOLS_DIR}")
    print(f"Target file: {TARGET_FILE}")

    schema = load_schema()
    if not schema:
        return

    # Find all .protocol.json files
    protocol_files = sorted(glob.glob(os.path.join(PROTOCOLS_DIR, "*.protocol.json")))

    if not protocol_files:
        print("Error: No protocol files (*.protocol.json) found.")
        return

    print(f"Found {len(protocol_files)} protocol files to compile and validate:")
    all_protocols = []
    for file_path in protocol_files:
        print(f"  - Validating {os.path.basename(file_path)}...")
        try:
            with open(file_path, "r") as f:
                protocol_data = json.load(f)

            # Validate the data against the schema
            jsonschema.validate(instance=protocol_data, schema=schema)
            all_protocols.append(protocol_data)
            print(f"    - Validation successful.")

        except FileNotFoundError:
            print(f"    - Error: File not found.")
        except json.JSONDecodeError:
            print(f"    - Error: Invalid JSON in file.")
        except jsonschema.exceptions.ValidationError as e:
            print(f"    - Error: Schema validation failed: {e.message}")
        except Exception as e:
            print(f"    - Error: An unexpected error occurred: {e}")

    # Create the final compiled object
    compiled_data = {
        "schema_version": schema.get("title", "Unknown"),
        "compiled_at": __import__("datetime").datetime.now().isoformat(),
        "protocols": all_protocols
    }

    # Convert the compiled data to a pretty-printed JSON string
    json_string = json.dumps(compiled_data, indent=2)

    # Wrap the JSON string in a markdown code block
    final_content = DISCLAIMER + "```json\n" + json_string + "\n```\n"

    # Write the final content to the target file
    with open(TARGET_FILE, "w") as f:
        f.write(final_content)

    print("\n--- Compilation Successful ---")
    print(f"Successfully generated new AGENTS.md file.")

def main():
    """Main function to run the compiler."""
    compile_protocols()

if __name__ == "__main__":
    main()